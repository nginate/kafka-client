import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.9'
    }
}

plugins {
    id 'nebula.optional-base' version '3.1.0'
    id "com.jfrog.bintray" version "1.6"
    id 'net.researchgate.release' version '2.3.5'
    id "com.bmuschko.docker-remote-api" version "2.6.7"
}

ext {
    slf4jVersion = '1.7.21'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "maven-publish"
apply plugin: 'nebula.optional-base'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: "info.solidsoft.pitest"
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencies {
    compile 'io.netty:netty-all:4.0.36.Final'
    compile "org.slf4j:slf4j-api:$slf4jVersion"

    // Utils
    compile 'com.google.guava:guava:19.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-beanutils:commons-beanutils:1.9.2'
    compile "com.github.nginate:commons-lang:1.0.0"
    compile "com.101tec:zkclient:0.3"
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.4.5'

    // Annotation processors
    compile 'org.projectlombok:lombok:1.16.8', optional
    compile 'com.google.code.findbugs:jsr305:3.0.1', optional

    testCompile 'junit:junit:4.12'
    testCompile 'org.testng:testng:6.9.11'
    testCompile 'org.assertj:assertj-core:3.4.1'
    testCompile "com.github.nginate:commons-testing:1.0.0"
    testCompile "com.github.nginate:commons-docker:1.0.0"

    testRuntime 'ch.qos.logback:logback-classic:1.1.7'
    testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    testRuntime "org.slf4j:jul-to-slf4j:$slf4jVersion"
    testRuntime "org.slf4j:log4j-over-slf4j:$slf4jVersion"
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

test {
    useTestNG()
    testLogging {
        exceptionFormat = 'full'
    }
}

pitest {
    excludedGroups = ["integration"]
}

bintray {
    user = findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
    key = findProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')
    publications = ['maven']
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'nginate'
        licenses = ['WTFPL']
        vcsUrl = 'https://github.com/nginate/kafka-client.git'
        version {
            name = project.version
            desc = "${project.name} $project.version"
            released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
            vcsTag = project.version
        }
    }
}

docker {
    def dockerCerts = findProperty('docker.certs') ?: System.getenv('DOCKER_CERTS')

    url = findProperty('docker.uri') ?: System.getenv('DOCKER_HOST') ?: 'http://localhost:2375'
    if (dockerCerts) {
        certPath = new File(dockerCerts.toString())
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
        }
    }
}

task pullKafkaImage_0_8(type: DockerPullImage) {
    repository = 'nginate/kafka-docker-bundle:0.8'
}

task pullKafkaImage_0_9(type: DockerPullImage) {
    repository = 'nginate/kafka-docker-bundle:0.9'
}

task pullDockerImages {
    dependsOn ':pullKafkaImage_0_8', ':pullKafkaImage_0_9'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

bintrayUpload.dependsOn 'generatePomFileForMavenPublication', 'assemble'
test.dependsOn pullDockerImages
build.dependsOn install
